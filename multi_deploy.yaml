---

- name: multi_deploy_test  
  hosts: s01ttwaslb1
  #hosts: s01ttapaap
  strategy: debug
  become_user: wasadmin
  become_method: sudo
  #become_user: bs_pa2000
  #become_method: sudo
  
  vars:
    stage: s01ttwaslb1
    #was_port: 8879
    was_cluster: "WAS_Cluster01"
    was_user: wasadmin
    was_password: "8hebngrwie!"
    was_temp: "/tmp"
    py_temp: "/tmp/deploy.py"
    was_war: fahrradpass-war-4.0.0.war
    mytext: |
      import sys, string
      def rf_trim_comma(str):
          if str[:1] == ',':
            str = str[1:len(str)]
          
          if str[len(str)-1:] == ',':
            str = str[:len(str)-1]
          return str
          
      def rf_prep_str(val):
          if val == None:
              return None
          
          i = len(val)
          if i == 0:
              return None
              
          retval = val.strip()
          retval = rf_trim_comma(retval)
          
          j = len(retval)
          
          if i != j:
              retval = rf_prep_str(retval)          
          return retval
          
      def rf_prep_svrs_nodes(str1, str2):
          arr1 = rf_prep_svrs(str1)
          arr2 = rf_prep_svrs(str2)
          
          if len(arr1) != len(arr2):
              raise 'Unequal no. of elements in each string array'
          else:
              retarr = []
              for item1, item2 in zip(arr1, arr2):
                  node_server = {"nodename": item2.strip(), "servername": item1.strip()}
                  retarr.append(node_server)
              return retarr
              
       def rf_prep_svrs(str1):
           if str1 == None:
               return None

           if len(str1) == 0:
               return None

           str1 = rf_prep_str(str1)
           if str1 == None:
               return []
           arr1 = str1.split(',');

           retarr = []
           for item1 in arr1:
              if len(item1.strip()) > 0:
                retarr.append(item1.strip())           
           return retarr
           
       def to_t_f(str):
           if str.lower() == 'yes' or str.lower() =='true':
              str = 'true'
           elif str.lower() == 'no' or str.lower() =='false':
              str ='false'
           # return original value if not Yes or No
           return str

    
    
    
         
  tasks: 
  - name: create python script
    copy:
      dest: "{{ py_temp }}"
      content: "{{ mytext }}"
    
